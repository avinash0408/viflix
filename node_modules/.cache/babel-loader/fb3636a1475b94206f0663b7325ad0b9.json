{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/avinash/react/viflix/src/components/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport './Row.css';\nconst imgurl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(props) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(props.fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [props.fetchUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${props.isLarge && \"row__posterLarge\"}`,\n        src: `${imgurl}${props.isLarge ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"+jZiGaK1IrFkDFSplSYv9W7La4s=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/avinash/react/viflix/src/components/Row.js"],"names":["React","useState","useEffect","YouTube","axios","imgurl","Row","props","movies","setMovies","fetchData","request","get","fetchUrl","data","results","title","map","movie","isLarge","poster_path","backdrop_path","name","id","trailerUrl","opts"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,WAAP;AAGA,MAAMC,MAAM,GAAC,sCAAb;;AACA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAChB,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBR,QAAQ,CAAC,EAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeQ,SAAf,GAA0B;AAC1B,YAAMC,OAAO,GAAE,MAAMP,KAAK,CAACQ,GAAN,CAAUL,KAAK,CAACM,QAAhB,CAArB;AACAJ,MAAAA,SAAS,CAACE,OAAO,CAACG,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOJ,OAAP;AACC;;AAAAD,IAAAA,SAAS;AAEb,GAPQ,EAON,CAACH,KAAK,CAACM,QAAP,CAPM,CAAT;AAUA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACC;AAAA,gBACIN,KAAK,CAACS;AADV;AAAA;AAAA;AAAA;AAAA,YADD,eAIA;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAECR,MAAM,CAACS,GAAP,CAAWC,KAAK,iBACb;AAEA,QAAA,SAAS,EAAG,eAAcX,KAAK,CAACY,OAAN,IAAiB,kBAAmB,EAF9D;AAGA,QAAA,GAAG,EAAG,GAAEd,MAAO,GAAEE,KAAK,CAACY,OAAN,GAAeD,KAAK,CAACE,WAArB,GAAmCF,KAAK,CAACG,aAAc,EAHxE;AAG2E,QAAA,GAAG,EAAEH,KAAK,CAACI;AAHtF,SACKJ,KAAK,CAACK,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AAFD;AAAA;AAAA;AAAA;AAAA,YAJA,eAcA,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEC,UAAlB;AAA8B,MAAA,IAAI,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,YAdA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GA/BQnB,G;;KAAAA,G;AAiCT,eAAeA,GAAf","sourcesContent":["import React,{ useState,useEffect} from 'react'\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport './Row.css';\n\n\nconst imgurl=\"https://image.tmdb.org/t/p/original/\";\nfunction Row(props) {\n    const [movies,setMovies]=useState([]);\n\n    useEffect(() => {\n        async function fetchData(){\n        const request= await axios.get(props.fetchUrl);\n        setMovies(request.data.results);\n        return request;\n        }fetchData();\n        \n    }, [props.fetchUrl]);\n\n\n    return (\n        <div className=\"row\">\n         <h2>\n            {props.title}\n        </h2>\n        <div className=\"row__posters\">\n        \n        {movies.map(movie=>(\n            <img \n            key={movie.id}\n            className={`row__poster ${props.isLarge && \"row__posterLarge\"}`}\n            src={`${imgurl}${props.isLarge ?movie.poster_path : movie.backdrop_path}`} alt={movie.name}>\n            </img>\n        ))}\n        </div>\n        <YouTube videoId={trailerUrl} opts={opts} />\n        </div>\n    );\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}