{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/avinash/react/viflix/src/components/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport './Row.css';\nimport movieTrailer from 'movie-trailer';\nconst imgurl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(props) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(props.fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [props.fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.original_name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        urlParams.get('v');\n        console.log(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${props.isLarge && \"row__posterLarge\"}`,\n        src: `${imgurl}${props.isLarge ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"L1ywPNv5QsX47ZoMAyL8l4aBE/I=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/avinash/react/viflix/src/components/Row.js"],"names":["React","useState","useEffect","YouTube","axios","movieTrailer","imgurl","Row","props","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","fetchUrl","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","title","original_name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","error","map","isLarge","poster_path","backdrop_path","id"],"mappings":"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","sourcesContent":["import React,{ useState,useEffect} from 'react'\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport './Row.css';\nimport movieTrailer from 'movie-trailer';\n\nconst imgurl=\"https://image.tmdb.org/t/p/original/\";\nfunction Row(props) {\n    const [movies,setMovies]=useState([]);\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\n\n    useEffect(() => {\n        async function fetchData(){\n        const request= await axios.get(props.fetchUrl);\n        setMovies(request.data.results);\n        return request;\n        }fetchData();\n        \n    }, [props.fetchUrl]);\n\n    const opts={\n        height: \"390\",\n        width: \"100%\",\n        playerVars:{\n            autoplay :1,\n        },\n    }\n    const handleClick = (movie) => {\n        if(trailerUrl){\n            setTrailerUrl('');\n        }\n        else{\n            movieTrailer(movie?.name||movie?.title||movie?.original_name||\"\").then((url)=>{\n                const urlParams=new URLSearchParams(new URL(url).search);\n                urlParams.get('v');\n                console.log(urlParams.get('v'));\n            }).catch((error)=>console.log(error));\n        }\n    }\n    return ( \n        <div className=\"row\">\n         <h2>\n            {props.title}\n        </h2>\n        <div className=\"row__posters\">\n        \n        {movies.map(movie=>(\n            <img \n            key={movie.id}\n            onClick={()=> handleClick(movie)}\n            className={`row__poster ${props.isLarge && \"row__posterLarge\"}`}\n            src={`${imgurl}${props.isLarge ?movie.poster_path : movie.backdrop_path}`} alt={movie.name}>\n            </img>\n        ))}\n        </div>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} /> }\n        </div>\n    );\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}